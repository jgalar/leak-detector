Writing Python Analyses - Leak Finder
-------------------------------------

Files provided:
buggy.c:		Buggy application we suspect of leaking.

Makefile:		Build "buggy" by issuing
			$ make

run.sh:			Launches "buggy" with liblttng-ust-libc-pthread-wrapper
			already preloaded.

run_with_tracing.sh:	Sets-up a tracing session capturing all userspace events
			and system calls (kernel instrumentation),
			launches "buggy",
			stops tracing when "buggy" has returned,
			destroys the session configuration.

			This script will enable the "vpid" context. The path
			where the trace has been saved will be printed out.

Documentation
-------------

Reading CTF traces with Python:
http://diamon.org/babeltrace/docs/python/reader/

Tracking memory usage using LTTng events:
https://lttng.org/docs/#doc-liblttng‑ust‑libc‑pthread-wrapper

For the curious, EfficiOS has released an internal tool in the same
spirit as this exercise. This tool was developped while trying to track
down a particularily hard to find memory leak in LTTng-Tools:
https://github.com/efficios/memleak-finder
